<?php

namespace Bbs;

class Controller
{
  private $errors;
  private $values;


  // 「__construct関数」（PHPで予め用意されている関数）
  // インスタンスを行った時点で、『自動的に』実行される。
  // 今回はSignupクラス（継承されている親クラス「Controller」を含め）インスタンス化をした時に、自動で処理が実行される。
  public function __construct()
  {
    // var_dump($_SESSION['token'] . 'Controllerで作られたトークン');
    // echo '<br>';


    // 「isset関数」とは、引数に指定した変数に値が設定されている、かつ、NULLではない場合にはtrue(正)の値を戻り値とする。
    // それ以外は、戻り値にfalse(偽)の値を返す。


    // CSRF対策 推測されにく文字列を生成
    // $_SESSION['token']の[]内の名前は自由に（好きなものを）付けることが出来る。

    // ここでは「$_SESSION['token']」に値が設定されている且つNULLでなければ、つまり今回では指定したページからトークンを付与されて来た場合、という条件となっている。
    if (!isset($_SESSION['token'])) {


      // bin2hex(openssl_random_pseudo_bytes(16)　⇒　PHPで用意されている関数。
      // 16文字（16byte）のランダムな英数字の生成。
      $_SESSION['token'] = bin2hex(openssl_random_pseudo_bytes(16));
    }


    // PHPデフォルトクラス 宣言なしでインスタンス生成ができる
    // オブジェクト型のデータを作る際に使う
    // 『stdClass』 ⇒ PHP側で予め用意されている『空の』クラス。処理（プロパティ）が全く入っていない。
    // オブジェクト形式でデータを変数・定数に保存（保持）したい時に使う。
    // オブジェクト型：簡単に言うとkeyと値を持つ連想配列の様な形式。
    // 下記の”errors”という変数は、オブジェクト形式（連想配列のようなもの）で値を保存できる、という意になる。
    // 「$this」は自分自身のクラスというイメージ。
    $this->errors = new \stdClass();
    $this->values = new \stdClass();
  }




//-------------------------------------------------------------------------------------

// オブジェクト
// PHP でのオブジェクトとは、データである変数とそのデータを操作する関数をまとめたものと言えます。
// （「オブジェクト」は、「データ（プロパティ）」と「処理（メソッド）」がセットになったものになります。）

// 配列：複数のデータ（変数）をまとめたもの
// 関数：１つの処理手続きをまとめたもの
// オブジェクト：複数の変数と複数の関数をセットにしてまとめたもの
// オブジェクトの持つ変数のことを「プロパティ」、オブジェクトの持つ関数のことを「メソッド」と呼びます。

// プロパティ（またはメンバー変数）：オブジェクトの持つ変数
// メソッド（またはメンバー関数）：オブジェクトの持つ関数

// 「クラス」はいわゆる「設計図」であり、その設計図をもとに「もの」を作ります。
// ここで作られる「もの」が「オブジェクト」
// ☆☆☆　オブジェクトとは、機能とデータを持ったもの。　☆☆☆

// ☆☆☆　『オブジェクトの生成』　☆☆☆
// 定義したクラスを利用するためには 『newステートメント』を使って、オブジェクトを生成しなければならない。
// 『newステートメント』⇒ $変数 = new クラス名();
// この１行によって、指定した変数にクラスから生成されたオブジェクトが格納されます。また、オブジェクトが持っているメンバ変数やメソッドを取り込むためには、以下のように記述します。
// ---------------------------
// $好きな名前 = new クラス名();
// $何でも名前 = $クラス名->変数or定数or関数(クラスの中にあるやつ)
// ---------------------------

// ☆☆☆超重要★★★
// クラスを利用するオブジェクトでは、メンバ関数で値が設定されていても、『後でその値を変更することが可能です』。つまり、閲覧者からの入力によって、簡単に商品や価格などを変更できる利点があります。


  // PHPの『クラス』
  // 「クラス」とは簡単に説明すると、プログラムの処理をまとめたオブジェクト。クラスが持つ要素は「プロパティ」と「メソッド」でる。
  // （オブジェクトを実現するひとつの手法）
  // クラスの中では主に、プロパティ（変数や定数）やメソッド（関数）の定義を記述します。クラスを定義するには、classキーワードを指定し、その次にクラス名を指定します。
  //☆☆☆　class クラス名　☆☆☆
  // ★★★※　クラスを定義するためには、メンバ変数 の宣言と メソッド の定義が含まれなければなりません。　※★★★


  // PHPの『プロパティ（変数、定数）』
  // プロパティとは、オブジェクトが持つデータや値のこと。
  //  定数 や 変数 を"プロパティ"と呼ぶ。
  // ☆　クラスが持つ処理群の総称。　☆


  //『メソッド（関数）』
  // オブジェクトが持つ機能のこと。ある処理を再利用できるようにしたもの。
  // 機能を実現するための関数にあたる。この場合、メソッドは一般の関数とは異なり、あくまでクラスのオブジェクトの中でのみ有効になる。


// ---------------------------------------------------------------------
// ・クラス：設計図
// ・インスタンス：実際に作った物
// ・オブジェクト：モノ（クラスとかインスタンスとかをふんわりと表現したもの）

// [プログラミング的に言うと]
// クラス：属性（プロパティ）と操作（メソッド）を定義したもの
// インスタンス：クラスをnew(実体化)したもの
// オブジェクト：クラスとかインスタンスとかのこと

// 例)
// クラス：スマートフォン
// インスタンス：iPhoneやAndroidの実機
// オブジェクト：ケータイ


// オブジェクト指向のシステムは、クラス（設計書・仕様書）という種類のものと、インスタンス（実体）という種類のものから成り立っています。
// 各インスタンスは、その基になるクラスが関係づいていいます。
// これらのもの（クラス、インスタンス）がひっくるめて「もの(Object)」という曖昧な名前で呼ばれているのです。
// ---------------------------------------------------------------------



  // 『メンバ変数』
  // メンバ変数とはクラスの中に定義するその『クラス固有の変数』のことです。「プロパティ」や「属性」、「フィールド」といった呼び方をされることもあります。
  // メンバ変数には「public」、「protected」、「private」の3種類のアクセス修飾子を使い分けることでメンバ変数ごとにアクセス権を変えることができます。
  // ☆☆☆　オブジェクトの「性質・状態などの情報を保持するため」に用いられます。人間で例えれば、名前・年齢・健康状態などがプロパティに保持すべき情報といえるでしょう。　☆☆☆
  // ☆☆☆　クラスの直下で定義されている変数（関数内（メソッドの中）で定義されてい”ない”）使い回すことが出来る。（別々のクラスで使い回せる。）☆☆☆
  // メソッドの中で定義されている変数は、基本的には使いまわせない。

  // ☆☆☆　定義方法　⇒　class クラス名 {public メンバ変数名;}　☆☆☆
  // メンバ変数は、『クラス固有の変数』なので、まずはクラスを定義します。その後クラス内の『一番上（クラスを定義した文の直下）』(コンストラクタやメソッドより　 上)にメンバ変数を定義します。

  // 『メンバ変数』とは、クラスで表現したいオブジェクトの「パラメータ」を格納するための変数となります。


  // public:
  // アクセス修飾子の1つpublicで定義されたメンバ変数は、どこからでもアクセス可能です。
  // そのクラスのインスタンスを生成し、使用することで、そのインスタンス内にセットされたメンバ変数の値を使用することができます。


  // protected:
  // アクセス修飾子の1つprotectedで定義されたメンバ変数は、そのクラス自身、そのクラスを継承したクラスと親クラスからのみアクセスできます。


  // private:
  // アクセス修飾子の1つprivateで定義されたメンバ変数は、定義したクラス内でしか使用できません。
  // privateで定義されたメンバ変数にアクセスする際は、セッターメソッドやゲッターメソッドを通して値の設定や値の取得を行います。





  // 『new』　インスタンス化
  // ☆☆☆　クラスは例外を除いて『直接』実行することができません。　☆☆☆
  // それはクラスは一般的なものだからです。なので一般的なものから1つの具体例にすることによってプログラムを実行できるようにし ます。この具体化することをインスタンス化と呼びます。

  // クラスは「設計図」なので、それだけでは機能を果たせない。
  // インスタンス化はその設計図を実現すること。
  // 関数の呼び出しや変数・定数の呼び出し（->）は、言わば実現化した物の機能を使用すること。


  // 料理で例えると）
  //       クラス：「ピザ」の設計図
  //インスタンス化: 設計図をもとに「マルゲリータ」を具現化。
  //         (->):サラミ、チーズ、トマトソース、あとがけのソース、ピザ皿、箱、おいしさ
  //  オブジェクト: イタリア料理




  // -----------------------------------------------------------------------------









  // 入力エラーの場合に画面上に値を残したままにする際に使用
  // 「setValues」というただの関数名。
  protected function setValues($key, $value)
  {
    $this->values->$key = $value;
  }
  // 入力エラーの場合に画面上に値を残したままにする際に使用
  // 「getValues」というただの関数名。関数呼び出し時には「getValues()」とカッコ()まで表記する。
  public function getValues()
  {
    return $this->values;
  }



  // Login.phpでは、$key⇒'login'、$error⇒ $e->getMessage()と引数として渡されている。
  protected function setErrors($key, $error)
  {
    $this->errors->$key = $error;
//↑↑ $this->errors->'login' = 'メールアドレスとパスワードを入力してください。';　Login.phpではこういう形になる。
  }


  public function getErrors($key)
  {
    return isset($this->errors->$key) ? $this->errors->$key : '';

    // isset　値がちゃんとあるかの判定するための関数
    //　$this->errors->$key　⇒　$this->errors->'login'   ※Login.phpでは
    // 値があれば($this->errors->$key)、無ければ$this->errors->$key、「return」で呼び出し元に実行される。

  }




  // エラーチェック判定メソッド
  // 「hasError」　変数。バリデーションエラーをチェックするための機能が入っている。
  protected function hasError()
  {
    // get_object_vars関数→指定したオブジェクトのプロパティを取得する
    // 「empty」関数　⇒()の中に何かしらの値を持っていれば「false」、空だったら「true」
    // !empty ⇒　「!」は否定。意味が逆転し、空でなければ「true」、空だったら「false」
    return !empty(get_object_vars($this->errors));
  }



  // ログイン確認メソッド
  // ログインしている場合は、ホーム画面にリダイレクトされる。
  // ログインしている状態なのに見られるとまずいのは「ログイン画面」、「ユーザー登録」等を表示させないため。
  // 逆にログインしないと見られない「ユーザー管理画面」「サービス内容画面」等も表示させないような仕組み。
  protected function isLoggedIn()
  {
    return isset($_SESSION['me']) && !empty($_SESSION['me']);
  }
}
